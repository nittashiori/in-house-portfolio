---
interface Props {
  className?: string;
  columns?: number;
  gap?: number | string;
  columnGap?: number | string;
  rowGap?: number | string;
  alignItems?: "flex-start" | "flex-end" | "center" | "baseline" | "stretch";
  as?: string;
}

const {
  /** クラス名 */
  className = '',
  /**　カラム数 */
  columns = 1,
  /** ギャップ */
  gap = "16px",
  /** 行のギャップ */
  columnGap = "",
  /** 列のギャップ */
  rowGap = "",
  /** 子要素の縦方向の配置 */
  alignItems = "stretch",
  /** タグ */
  as: Tag = 'div',
  /** 幅 */
  width = "auto",
} = Astro.props

const breakpoints = ['sm', 'md', 'lg'];

let styles: Record<string, string> = {};

breakpoints.forEach((breakpoint) => {
  // Columns
  styles[`--grid-columns-${breakpoint}`] = typeof columns === 'object' && columns[breakpoint] ? `${columns[breakpoint]}` : (typeof columns === 'number' ? `${columns}` : '1');

  // Gap
  styles[`--grid-gap-${breakpoint}`] = typeof gap === 'object' && gap[breakpoint] ? `${gap[breakpoint]}` : gap;

  // Column Gap
  styles[`--grid-column-gap-${breakpoint}`] = typeof columnGap === 'object' && columnGap[breakpoint] ? `${columnGap[breakpoint]}` : columnGap;

  // Row Gap
  styles[`--grid-row-gap-${breakpoint}`] = typeof rowGap === 'object' && rowGap[breakpoint] ? `${rowGap[breakpoint]}` : rowGap;

  // Align Items
  const align = typeof alignItems === 'object' ? alignItems[breakpoint] : alignItems;
  styles[`--grid-alignItems-${breakpoint}`] = align;

  // Width
  const widthValue = typeof width === 'object' ? width[breakpoint] : width;
  styles[`--grid-width-${breakpoint}`] = typeof widthValue === 'number' ? `${widthValue}px` : widthValue;
});
---
<Tag class=`c-grid ${className || ''}` style={styles}>
  <slot />
</Tag>

<style>
  .c-grid {
    display: grid;
    width: 100%;
    max-width: var(--grid-width-sm);
    grid-template-columns: repeat(var(--grid-columns-sm), 1fr);
    column-gap: var(--grid-column-gap-sm);
    row-gap: var(--grid-row-gap-sm);
    gap: var(--grid-gap-sm);
    align-items: var(--grid-alignItems-sm);

    /* 768px 以上 1199px 以下のデバイスに適用 */
    @media (min-width: 768px) and (max-width: 1199px) {
      max-width: var(--grid-width-md);
      grid-template-columns: repeat(var(--grid-columns-md), 1fr);
      column-gap: var(--grid-column-gap-md);
      row-gap: var(--grid-row-gap-md);
      gap: var(--grid-gap-md);
      align-items: var(--grid-alignItems-md);
    }

    @media (min-width: 1200px) {
      max-width: var(--grid-width-lg);
      grid-template-columns: repeat(var(--grid-columns-lg), 1fr);
      column-gap: var(--grid-column-gap-lg);
      row-gap: var(--grid-row-gap-lg);
      gap: var(--grid-gap-lg);
      align-items: var(--grid-alignItems-lg);
    }
  }
</style>