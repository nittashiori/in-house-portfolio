---
interface Props {
  className?: string;
  as?: string;
}

const {
  /** Class */
  className = '',
  /** タグ */
  as: Tag = 'div',
} = Astro.props;
---
<Tag class={`c-accordion ${className || ''}`}>
  <slot />
</Tag>

<style>
  .c-accordion {
    display: flex;
    flex-direction: column;
  }
</style>

<script type="module">
  document.addEventListener('DOMContentLoaded', () => {
    const details = document.querySelectorAll('.c-accordion-item');

    details.forEach(detail => {
      const summary = detail.querySelector('.c-accordion-button');
      const panel = detail.querySelector('.c-accordion-panel');
      let isTransitioning = false // 連打防止フラグ
      
      const onOpen = () => {
        if(detail.open || isTransitioning) {
          return;
        }
        console.log(summary)
        isTransitioning = true;
        panel.style.gridTemplateRows = '0fr';
        detail.setAttribute('open', '');
        requestAnimationFrame(() => {
          panel.style.gridTemplateRows = '1fr';
        })
        panel.addEventListener('transitionend', () => {
          isTransitioning = false;
        }, { once: true });
      }

      const onClose = () => {
        if(!detail.open || isTransitioning) {
          return;
        }
        isTransitioning = true;
        panel.style.gridTemplateRows = '0fr';
        panel.addEventListener('transitionend', () => {
          detail.removeAttribute('open');
          isTransitioning = false;
        }, { once: true })
      }

      summary.addEventListener('click', (event) => {
        event.preventDefault();
        if (detail.open) {
          onClose()
        } else {
          onOpen()
        }
      })
    });
  });
</script>